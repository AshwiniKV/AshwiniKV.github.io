}
r <- paste(attr(node[[node_id]]$split$breaks, 'levels')[l], sep='', collapse="','")
return(paste(names(node[[node_id]]$info$p.value), " in ('", r,"')", sep=''))
}
}
l_node <- function(newtree, node_id = 1, start_criteria = character(0), as.party.tree)
{
tree<-node_party(newtree)
node<-as.list(node_party(newtree))
if (!length(nodeapply(tree, ids = nodeids(tree))[[node_id]])) {
prediction <- predict_party(newtree, node_id)[[1]]
ypred <- paste(start_criteria,',y =',prediction)
print(ypred)
}
left_node_id <- ptree_left(newtree, node_id)
right_node_id <- ptree_right(newtree,node_id)
if (is.null(left_node_id) != is.null(right_node_id)) {
print('left node ID != right node id')
}
ypred <- character(0)
if (!is.null(left_node_id)) {
if(as.party.tree == TRUE){
new_criteria <- paste(start_criteria, ptree_criteria(newtree, node_id, TRUE, TRUE), sep=',')
}else{
new_criteria <- paste(start_criteria, ptree_criteria(newtree, node_id, TRUE, FALSE), sep=',')
}
if (1 == node_id)
if(as.party.tree == TRUE){
new_criteria <- ptree_criteria(newtree, node_id, TRUE, TRUE)
}else{
new_criteria <- ptree_criteria(newtree, node_id, TRUE, FALSE)
}
ypred <- l_node(newtree, left_node_id, new_criteria, as.party.tree)
}
if (!is.null(right_node_id)) {
if(as.party.tree == TRUE){
new_criteria <- paste(start_criteria, ptree_criteria(newtree, node_id, FALSE, TRUE), sep=',')
}else{
new_criteria <- paste(start_criteria, ptree_criteria(newtree, node_id, FALSE, FALSE), sep=',')
}
if (1 == node_id)
if(as.party.tree == TRUE){
new_criteria <- ptree_criteria(newtree, node_id, F, TRUE)
}else{
new_criteria <- ptree_criteria(newtree, node_id, F, FALSE)
}
ypred <- paste(ypred, l_node(newtree, right_node_id, new_criteria, as.party.tree))
}
if(!is.character(ypred)){
return(ypred)
}
}
list_node<-function(treet, as.party.tree){
if(as.party.tree == TRUE){
pathway<-capture.output(l_node(treet, as.party.tree = T))
}else{
pathway<-capture.output(l_node(treet, as.party.tree = F))
}
gerid<-gsub("*\\[1](*)\\'*", "\\1", pathway)
gerid<-gsub("\"", "", gerid)
return(paste(gerid, collapse = " ;"))
}
## Function to get rid of spaces in strings
trim <-function (x){
gsub("^\\s+|\\s+$", "", x)}
makeTransparent = function(colortype, alpha) {
## Helper function to make colors transparent
if(alpha<0 | alpha>1) stop("alpha must be between 0 and 1")
alpha = floor(255*alpha)
newColor = col2rgb(col=unlist(list(colortype)), alpha=FALSE)
.makeTransparent = function(col, alpha) {
rgb(red=col[1], green=col[2], blue=col[3], alpha=alpha, maxColorValue=255)
}
newColor = apply(newColor, 2, .makeTransparent, alpha=alpha)
return(newColor)
}
minmax.mat <- function(str,varnms, interval) {
## Helper function to create a matrix of ranges for each variable in a path to a node
comps <- strsplit(str,",")
MMM <- matrix(data=rep(c(-Inf,Inf, " "),length(varnms)),nrow=length(varnms),ncol=3,byrow=TRUE) ### min-max matrix
rownames(MMM) <- varnms
#nodeids(potentialtree)
Mlist<-list()
#Y<-fitted(cond.tree)[[3]]
if(is.numeric(Y)){length.mat<-length(comps[[1]])-2}
if(is.factor(Y)){if(interval == TRUE){length.mat<-length(comps[[1]])-3}else{length.mat<-length(comps[[1]])-2}}
for(i in 1:length.mat) {
nodestr <- strsplit(trim(comps[[1]][i])," ")
node.varnm <- trim(nodestr[[1]][1])
node.dir <- trim(nodestr[[1]][2])
node.split <- trim(nodestr[[1]][3])
var.row <- which(varnms==node.varnm)
if(node.dir == "<=") {
MMM[var.row,2] <- as.numeric(node.split)
MMM[var.row,3] <- "<="
} else {
MMM[var.row,1] <- as.numeric(node.split)
MMM[var.row,3] <- ">"
}
Mlist[[i]]<-c(node.varnm, MMM[var.row,])
output <- matrix(unlist(Mlist), ncol = 4, byrow = TRUE)
}
if(is.factor(Y)){y<-paste0(comps[[1]][length(comps[[1]]) - 2],",",comps[[1]][length(comps[[1]]) - 1])}
if(is.numeric(Y)){y <- comps[[1]][length(comps[[1]]) - 1]}
return(list(M=MMM,y=y))
}
#Terminal nodes
#which(!nodeids(cond.tree1)%in%nodeids(cond.tree1, termina = TRUE))
plot.minmax <- function(My,X,Y, str, color.type, alpha) {
## Main function which plots the bars for each variable along with a histogram of the outcome
comps <- strsplit(str,",")
mymat <- matrix(as.numeric(My$M[,-3]), ncol = 2)
my.y <- My$y
mydir<-My$M[,3]
if(!is.factor(Y)) {
my.y.val <- as.numeric(strsplit(trim(my.y)," ")[[1]][3])
my.y.pct <- ecdf(Y)(my.y.val)
}
var.nms <- rownames(My$M)
act.vars <- apply(mymat,1,function(x) { !all(abs(x)==Inf) })
max.y <- sum(act.vars)+1
#rbw <- cm.colors(n=nrow(mymat))
colors<-list(rainbow(n = nrow(mymat)), heat.colors(n = nrow(mymat)), terrain.colors(n = nrow(mymat)), topo.colors(n = nrow(mymat)), cm.colors(n = nrow(mymat)))
rbw<-colors[[color.type]]
## Find the y's which "belong" in this node
node.index <- 1:length(Y)
for(i in 1:nrow(mymat)) {
digit<-8
node.index <- intersect(node.index,c(which(round(X[,i],digit)>round(mymat[i,1],digit)&round(X[,i],digit)<=round(mymat[i,2],digit))))
}
## Create the underlying histogram, but don't plot it yet
if(is.factor(Y)) {
wdth <- 1/length(levels(Y))
H <- hist(as.integer(Y[node.index])/length(levels(Y)),breaks=seq(0,1,length.out=length(levels(Y))+1),plot=FALSE)
## Scale the histogram so it fits vertically on the plot.
scale.factor <- max.y/max(H$density)
## Set up an empty plot of the correct size
plot(NA,xlim=c(0,1),ylim=c(0,max.y),ylab="",xlab="Percentile",font = 2, main=paste0("Node ID = ",tail(comps[[1]], 1),"(", "n = ",length(node.index),")"),bty="n",yaxt="n", cex.axis = 1.5,cex.main = 2.25)
## Plot the background histogram
barplot(scale.factor*H$density,width=wdth,col=rgb(0,0,0,0.15),border=rgb(0,0,0,0.1),add=TRUE,space=0,yaxt="n")
## Add the category labels
text(seq(wdth/2,1-wdth/2,by=wdth),rep(0,length(levels(Y))),levels(Y),pos=3,adj=0.5,cex=1.5, col=gray(0.1))
#text(seq(wdth/2,1-wdth/2,by=wdth),rep(quantile(scale.factor*H$density, 0.97),length(levels(Y))),levels(Y),pos=3,adj=0.5,cex=1.5,col=gray(0.5))
}
else{
H <- hist(ecdf(Y)(Y[node.index]),breaks=seq(0,1,by=0.1),plot=FALSE)
## Scale the histogram so it fits vertically on the plot.
scale.factor <- max.y/max(H$density)
## Set up an empty plot of the correct size
plot(NA,xlim=c(0,1),ylim=c(0,max.y),ylab="", xlab="Percentile",font = 2,main=paste0("Node ID = ", tail(comps[[1]], 1), " (Mean = ",round(my.y.val, 2),", n = ",length(node.index),")"),bty="n", yaxt = "n", cex.axis = 1.5, cex.main =2.25)
## Plot the background histogram
bp<-barplot(scale.factor*H$density,width=0.1,col=rgb(0,0,0,0.15),border=rgb(0,0,0,0.1),add=TRUE,space=0, yaxt = "n")
counts.ecdf<-ceiling(10*ecdf(Y)(Y[node.index]))
mean.Ynode<-data.frame(counts.ecdf, Y[node.index])
mean.Y<-aggregate(Y[node.index], list(counts.ecdf),  mean)$x
if(all((mean.Y)<=10)){mean.Y<-round(mean.Y, 1)}else{
mean.Y<-round(mean.Y, 0)
}
titles.Y<-rep(" ", length(H$density))
titles.Y[!H$density == 0]<-mean.Y
text(bp, 0, titles.Y, pos=3,adj=0.5,cex=1.5)
## Draw in a line for the mean
mu.Y <- mean(Y[node.index])
segments(ecdf(Y)(mu.Y),0,ecdf(Y)(mu.Y),max.y,col=rgb(0,0,0,0.5),lwd=2)
}
## Now plot the horizontal bars corresponding to each variable.
j <- 1
for(i in which(act.vars)) {
F.x <- ecdf(X[,var.nms[i]])
lo <- ifelse(mymat[i,1]==-Inf,0,F.x(mymat[i,1]))
hi <- ifelse(mymat[i,2]==Inf,1,F.x(mymat[i,2]))
polygon(c(lo,lo,hi,hi),c(j-0.5,j+0.5,j+0.5,j-0.5),col=makeTransparent(rbw[i],alpha = alpha),border=NA)
if(rownames(My$M)[i] == "sex"){
if(mymat[i] != "-Inf"){
text(mean(c(lo,hi)),j,paste0(rownames(My$M)[i],"-", c("male", "female")[mymat[i]]), font = 2, cex = 1.6)}else{
text(mean(c(lo,hi)),j,paste0(rownames(My$M)[i],"-", "female"), font = 2, cex = 1.6)
}}
if(rownames(My$M)[i] != "sex"){
if(mymat[i,2] == Inf){idx <- 1}else{idx <-2}
if(My$M[i,1] != -Inf && My$M[i,2] == Inf){
text(mean(c(lo,hi)),j,paste0(rownames(My$M)[i], ">",round(as.numeric(My$M[i,1]), 2)), font = 2, cex = 1.6)
}
if(My$M[i,1] != -Inf && My$M[i,2] != Inf){
text(mean(c(lo,hi)),j,paste0(rownames(My$M)[i], "<=",round(as.numeric(My$M[i,2]), 2), "\n",rownames(My$M)[i], ">",round(as.numeric(My$M[i,1]), 2)), font = 2, cex = 1.6)
}
if(My$M[i,1] == -Inf && My$M[i,2] != Inf){
text(mean(c(lo,hi)),j,paste0(rownames(My$M)[i], "<=",round(as.numeric(My$M[i,2]), 2)), font = 2, cex = 1.6)
}}## Label the variables
j <- j+1
}
}
visTree <- function(cond.tree,rng=NULL, interval, as.party.tree, color.type, alpha) {
## Wrapper function to produce plots from a conditional inference tree
## 'range' parameter can restrict plotting to a particular set of nodes
if(as.party.tree == TRUE){
splittree<-list_node(cond.tree, as.party.tree = TRUE)
}else{
splittree<-list_node(cond.tree, as.party.tree = FALSE)
}
structure<-strsplit(splittree, split=";")
#structure<-unlist(strsplit(list_node(cond.tree), split=";"))
terminal.id<-nodeids(cond.tree, terminal = TRUE)
if(length(structure[[1]]) == length(terminal.id)){
structure[[1]]<-sapply(1:length(structure[[1]]), function(i){
paste0(structure[[1]][i],",", terminal.id[i], " ")})
}
input.info<-data_party(cond.tree)
#  X <- input.info[,2:(length(input.info)-3)]
if(as.party.tree == TRUE){
X <- input.info[,2:(length(input.info)-2)]
Y <- fitted(cond.tree)[[2]]
}else{
X <- input.info[,2:(length(input.info)-3)]
Y <- fitted(cond.tree)[[3]]
}
if(is.factor(Y)) {
n.terminals <- length(structure[[1]])
#prob.mat <- matrix(data=unlist(lapply(structure[[1]],function(S) {
# unlist(lapply(strsplit(S,","),function(split.S) {
# seg <- unlist(split.S[length(split.S)])
# as.numeric(trim(strsplit(seg,"=")[[1]][2]))
#}))
#})), nrow=n.terminals)
y.list <- sapply(1:length(structure[[1]]),function(j) {
seg<-strsplit(structure[[1]],",")
if(interval == TRUE){paste0(seg[[j]][c((length(seg[[j]])-2): (length(seg[[j]])-1))], collapse = ",")}else{
paste0(seg[[j]][length(seg[[j]])-2], collapse = ",")}
})
x.list <- sapply(1:length(structure[[1]]),function(j) {
seg<-strsplit(structure[[1]],",")
x.l<-sapply(1:length(seg), function(i){
if(interval == TRUE){
x.length<-length(seg[[i]]) - 3}else{
x.length<-length(seg[[i]])-2}
})
if(interval == TRUE){
paste0(seg[[j]][1:(length(seg[[j]])-3)], collapse = ",")}else{
paste0(seg[[j]][1:(length(seg[[j]])-2)], collapse = ",")
}
})
term.node<-sapply(1:length(structure[[1]]), function(j){
seg<-strsplit(structure[[1]], ",")
if(interval == TRUE){paste0(tail(seg[[j]],1), collapse = ",")}else{
paste0(tail(seg[[j]],1), collapse = ",")}
})
structure <- lapply(1:length(y.list),function(i) {
paste0(x.list[[i]],", ",y.list[[i]], ", ", term.node[[i]])
})
}
if(length(unlist(structure))==1) { stop("Tree has only a single node; nothing to visualize.") }
#terminal.id<-nodeids(cond.tree, terminal = TRUE)
n.terminals <- ifelse(is.null(rng),length(unlist(structure)),length(rng))
if(is.null(rng)) {
index <- 1:n.terminals } else {
index <- min(rng):min(max(rng),length(unlist(structure))) } ## Should probably do some range checking
if(length(index)>10) stop("Number of subgroups is too large")
par(mfrow=c(2,ceiling(length(index)/2)),mar=c(2,1,3,1))
sapply(unlist(structure)[index],function(S) { plot.minmax(minmax.mat(S,colnames(X), interval), X,Y, S, color.type, alpha)})
}
######################Categorical###########################
library(partykit)
set.seed(125)
X1 <- rnorm(100)
X2 <- rnorm(100)
Y<-rnorm(100,mean = X1+X2,sd=1)
qnt <- quantile(Y)
Y<-cut(Y,unique(qnt),include.lowest=TRUE)
X<-cbind(X1, X2)
varnms<-colnames(X)
cond.tree2 <- partykit::ctree(Y~X1+X2, control = ctree_control(mincriterion = 0.95))
plot(cond.tree2)
visTree(cond.tree2, interval = TRUE, as.party.tree = FALSE, color.type = 2, alpha = 0.3)
library(rpart)
cond.tree3<-rpart::rpart(Y~X1+X2)
cond.tree3<-as.party(cond.tree3)
visTree(cond.tree3, interval = T, as.party.tree = TRUE, color.type = 4, alpha = 0.6)
######################Continuous######################
getwd()
setwd("./visTree")
document()
setwd("..")
install("visTree")
library(visTree)
check("visTree")
str_length <- function(string) {
string <- check_string(string)
nc <- nchar(string, allowNA = TRUE)
is.na(nc) <- is.na(string)
nc
}
str_length(letters)
letters
airct
?ctree
airq <- subset(airquality, !is.na(Ozone))
airct <- ctree(Ozone ~ ., data = airq)
plot(airct)
visTree(airct)
visTree(airct, as.party.tree = FALSE)
visTree(airct, interval = FALSE, as.party.tree = FALSE)
visTree(airct, interval = FALSE, as.party.tree = FALSE, color.type = 2)
visTree(airct, interval = FALSE, as.party.tree = FALSE, color.type = 2, alpha = 0.2)
getwd()
setwd("./visTree")
document()
setwd("..")
install("visTree")
library(visTree)
check("visTree")
l_node(airct)
l_node(airct, as.party.tree = FALSE)
setwd("./visTree")
document()
setwd("..")
install("visTree")
library(visTree)
check("visTree")
setwd("./visTree")
document()
setwd("..")
install("visTree")
library(visTree)
check("visTree")
l_node(ctree(Ozone ~ ., data = subset(airquality, !is.na(Ozone)), as.party.tree = FALSE))
l_node(ctree(Ozone ~ ., data = subset(airquality, !is.na(Ozone))), as.party.tree = FALSE)
setwd("./visTree")
document()
setwd("..")
install("visTree")
library(visTree)
check("visTree")
setwd("./visTREE")
setwd("./visTree")
setwd("..")
setwd("./visTree")
document()
setwd("..")
install("visTree")
library(visTree)
check("visTree")
setwd("./visTree")
document()
setwd(..)
setwd("..")
install("visTree")
library(visTree)
check("visTree")
list_node(partykit::ctree(Ozone ~ ., data = airquality), as.party.tree = FALSE)
?rpart
list_node(partykit::ctree(Kyphosis ~ Age + Number + Start, data = kyphosis), as.party.tree = FALSE)
list_node(partykit::ctree(Kyphosis ~ ., data = kyphosis), as.party.tree = FALSE)
partykit::ctree(Kyphosis ~ ., data = kyphosis)
p1<-partykit::ctree(Kyphosis ~ ., data = kyphosis)
plot(p1)
setwd("./visTree")
document()
setwd("..")
install("visTree")
library(visTree)
check("visTree")
setwd("./visTree")
document()
setwd("..")
install("visTree")
library(visTree)
check("visTree")
setwd("./visTree")
document()
setwd("..")
install("visTree")
library(visTree)
check("visTree")
data(Nile)
data("Titanic")
data(Titanic)
Titanic
data("Orange")
Orange
list_node(ctree(Tree ~ ., data = Orange), as.party.tree = FALSE)
ctree(Tree ~ ., data = Orange)
data("cars")
cars
data("trees")
trees
list_node(ctree(Girth ~ ., data = trees), as.party.tree = FALSE)
ctree(Girth ~ ., data = trees)
plot(ctree(Girth ~ ., data = trees))
setwd("./visTree")
document()
setwd("..")
install("visTree")
library(visTree)
check("visTree")
setwd("./visTree")
document()
setwd("..")
install("visTree")
library(visTree)
check("visTree")
setwd("./visTree")
document()
setwd("..")
install("visTree")
library(visTree)
check("visTree")
setwd("./visTree")
document()
setwd("..")
install("visTree")
library(visTree)
check("visTree")
setwd("./visTree")
document()
setwd("..")
install("visTree")
library(visTree)
check("visTree")
colors(rainbow)
colors(rainbow(2))
rainbow(2)
rainbow(5)
makeTransparent(colortype = rainbow(2), alpha = 0.7)
setwd("./visTree")
document()
setwd("..")
install("visTree")
library(visTree)
check("visTree")
names(trees)
setwd("./visTree")
document()
setwd("..")
install("visTree")
library(visTree)
check("visTree")
?minmax_mat
setwd("./visTree")
document()
setwd("..")
install("visTree")
library(visTree)
?minmax_mat
?minmax_mat
detach(visTree)
detach("visTree")
install("visTree")
library(devtools)
install("visTree")
library(visTree)
?minmax_mat
path_node(partykit::ctree(Girth ~ ., data = trees))
path_node
getwd()
setwd("./visTree")
document()
setwd("..")
setwd("./visTree")
document()
document()
setwd("..")
install("visTree")
library(visTree)
check("visTree")
setwd("./visTree")
document()
setwd("..")
install("visTree")
setwd("./visTree")
document()
document()
setwd("..")
install("visTree")
library(visTree)
check("visTree")
ptree_criteria(cond.tree2, 1, T, F)
setwd("./visTree")
document()
setwd("..")
install("visTree")
library(visTree)
check("visTree")
setwd("./visTree")
document()
setwd("..")
install("visTree")
library(visTree)
check("visTree")
install("visTree")
library(devtools)
install("visTree")
library(visTree)
check("visTree")
set.seed(125)
X1 <- rnorm(100)
X2 <- rnorm(100)
Y<-rnorm(100,mean = X1+X2,sd=1)
qnt <- quantile(Y)
Y<-cut(Y,unique(qnt),include.lowest=TRUE)
X<-cbind(X1, X2)
varnms<-colnames(X)
cond.tree2 <- partykit::ctree(Y~X1+X2, control = ctree_control(mincriterion = 0.95))
library(partykit)
cond.tree2 <- partykit::ctree(Y~X1+X2, control = ctree_control(mincriterion = 0.95))
plot(cond.tree2)
visTree(cond.tree2, interval = TRUE, as.party.tree = FALSE, color.type = 2, alpha = 0.3)
visTree
?visTree
check("visTree")
setwd("C:\\Users\\user\\Documents\\GitHub\\AshwiniKV.github.io")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
