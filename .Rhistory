index <- 1:n.terminals } else {
index <- min(rng):min(max(rng),length(unlist(structure))) } ## Should probably do some range checking
par(mfrow=c(2,ceiling(length(index)/2)),mar=c(2,1,3,1))
S<-unlist(structure)[index]
S
minmax.mat(S,colnames(X), interval)
My<-minmax.mat(S,colnames(X), interval)
comps <- strsplit(str,",")
str<-S
comps <- strsplit(str,",")
mymat <- matrix(as.numeric(My$M[,-3]), ncol = 2)
my.y <- My$y
mydir<-My$M[,3]
if(!is.factor(Y)) {
my.y.val <- as.numeric(strsplit(trim(my.y)," ")[[1]][3])
my.y.pct <- ecdf(Y)(my.y.val)
}
var.nms <- rownames(My$M)
act.vars <- apply(mymat,1,function(x) { !all(abs(x)==Inf) })
max.y <- sum(act.vars)+1
rbw <- rainbow(n=nrow(mymat))
node.index <- 1:length(Y)
for(i in 1:nrow(mymat)) {
digit<-8
node.index <- intersect(node.index,c(which(round(X[,i],digit)>round(mymat[i,1],digit)&round(X[,i],digit)<=round(mymat[i,2],digit))))
}
H <- hist(ecdf(Y)(Y[node.index]),breaks=seq(0,1,by=0.1),plot=FALSE)
scale.factor <- max.y/max(H$density)
plot(NA,xlim=c(0,1),ylim=c(0,max.y),ylab="", xlab="Percentile",font = 2,main=paste0("Node ID = ", tail(comps[[1]], 1), " (Mean = ",round(my.y.val, 2),", n = ",length(node.index),")"),bty="n", yaxt = "n", cex.axis = 1.5, cex.main =2.25)
plot.minmax <- function(My,X,Y, str) {
## Main function which plots the bars for each variable along with a histogram of the outcome
comps <- strsplit(str,",")
mymat <- matrix(as.numeric(My$M[,-3]), ncol = 2)
my.y <- My$y
mydir<-My$M[,3]
if(!is.factor(Y)) {
my.y.val <- as.numeric(strsplit(trim(my.y)," ")[[1]][3])
my.y.pct <- ecdf(Y)(my.y.val)
}
var.nms <- rownames(My$M)
act.vars <- apply(mymat,1,function(x) { !all(abs(x)==Inf) })
max.y <- sum(act.vars)+1
rbw <- rainbow(n=nrow(mymat))
## Find the y's which "belong" in this node
node.index <- 1:length(Y)
for(i in 1:nrow(mymat)) {
digit<-8
node.index <- intersect(node.index,c(which(round(X[,i],digit)>round(mymat[i,1],digit)&round(X[,i],digit)<=round(mymat[i,2],digit))))
}
## Create the underlying histogram, but don't plot it yet
if(is.factor(Y)) {
wdth <- 1/length(levels(Y))
H <- hist(as.integer(Y[node.index])/length(levels(Y)),breaks=seq(0,1,length.out=length(levels(Y))+1),plot=FALSE)
## Scale the histogram so it fits vertically on the plot.
scale.factor <- max.y/max(H$density)
## Set up an empty plot of the correct size
plot(NA,xlim=c(0,1),ylim=c(0,max.y),ylab="",xlab="Percentile",main=paste0("Node ID = ",tail(comps[[1]], 1),"(", "n = ",length(node.index),")"),bty="n",yaxt="n", cex.axis = 1.5,cex.main = 2.25)
## Plot the background histogram
barplot(scale.factor*H$density,width=wdth,col=rgb(0,0,0,0.15),border=rgb(0,0,0,0.1),add=TRUE,space=0,yaxt="n")
## Add the category labels
text(seq(wdth/2,1-wdth/2,by=wdth),rep(0,length(levels(Y))),levels(Y),pos=3,adj=0.5,cex=1.5, col=gray(0.1))
#text(seq(wdth/2,1-wdth/2,by=wdth),rep(quantile(scale.factor*H$density, 0.97),length(levels(Y))),levels(Y),pos=3,adj=0.5,cex=1.5,col=gray(0.5))
}
else{
H <- hist(ecdf(Y)(Y[node.index]),breaks=seq(0,1,by=0.1),plot=FALSE)
## Scale the histogram so it fits vertically on the plot.
scale.factor <- max.y/max(H$density)
## Set up an empty plot of the correct size
plot(NA,xlim=c(0,1),ylim=c(0,max.y),ylab="", xlab="Percentile",font = 2,main=paste0("Node ID = ", tail(comps[[1]], 1), " (Mean = ",round(my.y.val, 2),", n = ",length(node.index),")"),bty="n", yaxt = "n", cex.axis = 1.5, cex.main =2.25)
## Plot the background histogram
bp<-barplot(scale.factor*H$density,width=0.1,col=rgb(0,0,0,0.15),border=rgb(0,0,0,0.1),add=TRUE,space=0, yaxt = "n")
counts.ecdf<-ceiling(10*ecdf(Y)(Y[node.index]))
mean.Ynode<-data.frame(counts.ecdf, Y[node.index])
mean.Y<-aggregate(Y[node.index], list(counts.ecdf),  mean)$x
if(all((mean.Y)<=10)){mean.Y<-round(mean.Y, 1)}else{
mean.Y<-round(mean.Y, 0)
}
titles.Y<-rep(" ", length(H$density))
titles.Y[!H$density == 0]<-mean.Y
text(bp, 0, titles.Y, pos=3,adj=0.5,cex=1.5)
## Draw in a line for the mean
mu.Y <- mean(Y[node.index])
segments(ecdf(Y)(mu.Y),0,ecdf(Y)(mu.Y),max.y,col=rgb(0,0,0,0.5),lwd=2)
}
## Now plot the horizontal bars corresponding to each variable.
j <- 1
for(i in which(act.vars)) {
F.x <- ecdf(X[,var.nms[i]])
lo <- ifelse(mymat[i,1]==-Inf,0,F.x(mymat[i,1]))
hi <- ifelse(mymat[i,2]==Inf,1,F.x(mymat[i,2]))
polygon(c(lo,lo,hi,hi),c(j-0.5,j+0.5,j+0.5,j-0.5),col=makeTransparent(rbw[i],0.5),border=NA)
if(rownames(My$M)[i] == "sex"){
if(mymat[i] != "-Inf"){
text(mean(c(lo,hi)),j,paste0(rownames(My$M)[i],"-", c("male", "female")[mymat[i]]), font = 2, cex = 1.6)}else{
text(mean(c(lo,hi)),j,paste0(rownames(My$M)[i],"-", "female"), font = 2, cex = 1.6)
}}
if(rownames(My$M)[i] != "sex"){
if(mymat[i,2] == Inf){idx <- 1}else{idx <-2}
if(My$M[i,1] != -Inf && My$M[i,2] == Inf){
text(mean(c(lo,hi)),j,paste0(rownames(My$M)[i], ">",round(as.numeric(My$M[i,1]), 2)), font = 2, cex = 1.6)
}
if(My$M[i,1] != -Inf && My$M[i,2] != Inf){
text(mean(c(lo,hi)),j,paste0(rownames(My$M)[i], "<=",round(as.numeric(My$M[i,2]), 2), "\n",rownames(My$M)[i], ">",round(as.numeric(My$M[i,1]), 2)), font = 2, cex = 1.6)
}
if(My$M[i,1] == -Inf && My$M[i,2] != Inf){
text(mean(c(lo,hi)),j,paste0(rownames(My$M)[i], "<=",round(as.numeric(My$M[i,2]), 2)), font = 2, cex = 1.6)
}}## Label the variables
j <- j+1
}
}
visTree <- function(cond.tree,rng=NULL, interval, rpart.party) {
## Wrapper function to produce plots from a conditional inference tree
## 'range' parameter can restrict plotting to a particular set of nodes
splittree<-list_node(cond.tree)
structure<-strsplit(splittree, split=";")
#structure<-unlist(strsplit(list_node(cond.tree), split=";"))
terminal.id<-nodeids(cond.tree, terminal = TRUE)
if(length(structure[[1]]) == length(terminal.id)){
structure[[1]]<-sapply(1:length(structure[[1]]), function(i){
paste0(structure[[1]][i],",", terminal.id[i], " ")})
}
input.info<-data_party(cond.tree)
#  X <- input.info[,2:(length(input.info)-3)]
if(rpart.party == TRUE){
X <- input.info[,2:(length(input.info)-2)]
Y <- fitted(cond.tree)[[2]]
}else{
X <- input.info[,2:(length(input.info)-3)]
Y <- fitted(cond.tree)[[3]]
}
if(is.factor(Y)) {
n.terminals <- length(structure[[1]])
#prob.mat <- matrix(data=unlist(lapply(structure[[1]],function(S) {
# unlist(lapply(strsplit(S,","),function(split.S) {
# seg <- unlist(split.S[length(split.S)])
# as.numeric(trim(strsplit(seg,"=")[[1]][2]))
#}))
#})), nrow=n.terminals)
y.list <- sapply(1:length(structure[[1]]),function(j) {
seg<-strsplit(structure[[1]],",")
if(interval == TRUE){paste0(seg[[j]][c((length(seg[[j]])-2): (length(seg[[j]])-1))], collapse = ",")}else{
paste0(seg[[j]][length(seg[[j]])-2], collapse = ",")}
})
x.list <- sapply(1:length(structure[[1]]),function(j) {
seg<-strsplit(structure[[1]],",")
x.l<-sapply(1:length(seg), function(i){
if(interval == TRUE){
x.length<-length(seg[[i]]) - 3}else{
x.length<-length(seg[[i]])-2}
})
if(interval == TRUE){
paste0(seg[[j]][1:(length(seg[[j]])-3)], collapse = ",")}else{
paste0(seg[[j]][1:(length(seg[[j]])-2)], collapse = ",")
}
})
term.node<-sapply(1:length(structure[[1]]), function(j){
seg<-strsplit(structure[[1]], ",")
if(interval == TRUE){paste0(tail(seg[[j]],1), collapse = ",")}else{
paste0(tail(seg[[j]],1), collapse = ",")}
})
structure <- lapply(1:length(y.list),function(i) {
paste0(x.list[[i]],", ",y.list[[i]], ", ", term.node[[i]])
})
}
if(length(unlist(structure))==1) { stop("Tree has only a single node; nothing to visualize.") }
#terminal.id<-nodeids(cond.tree, terminal = TRUE)
n.terminals <- ifelse(is.null(rng),length(unlist(structure)),length(rng))
if(is.null(rng)) {
index <- 1:n.terminals } else {
index <- min(rng):min(max(rng),length(unlist(structure))) } ## Should probably do some range checking
par(mfrow=c(2,ceiling(length(index)/2)),mar=c(2,1,3,1))
sapply(unlist(structure)[index],function(S) { plot.minmax(minmax.mat(S,colnames(X), interval),X,Y, S)})
}
library(partykit)
set.seed(120)
X1 <- rnorm(100)
X2 <- rnorm(100)
Y <- cut(rnorm(100,mean=X1+X2,sd=1),4)
X<-cbind(X1, X2)
varnms<-colnames(X)
cond.tree2 <- partykit::ctree(Y~X1+X2, control = ctree_control(mincriterion = 0.95))
plot(cond.tree2)
visTree(cond.tree2, interval = TRUE, rpart.party = FALSE)
plot.minmax <- function(My,X,Y, str) {
## Main function which plots the bars for each variable along with a histogram of the outcome
comps <- strsplit(str,",")
mymat <- matrix(as.numeric(My$M[,-3]), ncol = 2)
my.y <- My$y
mydir<-My$M[,3]
if(!is.factor(Y)) {
my.y.val <- as.numeric(strsplit(trim(my.y)," ")[[1]][3])
my.y.pct <- ecdf(Y)(my.y.val)
}
var.nms <- rownames(My$M)
act.vars <- apply(mymat,1,function(x) { !all(abs(x)==Inf) })
max.y <- sum(act.vars)+1
rbw <- rainbow(n=nrow(mymat))
## Find the y's which "belong" in this node
node.index <- 1:length(Y)
for(i in 1:nrow(mymat)) {
digit<-8
node.index <- intersect(node.index,c(which(round(X[,i],digit)>round(mymat[i,1],digit)&round(X[,i],digit)<=round(mymat[i,2],digit))))
}
## Create the underlying histogram, but don't plot it yet
if(is.factor(Y)) {
wdth <- 1/length(levels(Y))
H <- hist(as.integer(Y[node.index])/length(levels(Y)),breaks=seq(0,1,length.out=length(levels(Y))+1),plot=FALSE)
## Scale the histogram so it fits vertically on the plot.
scale.factor <- max.y/max(H$density)
## Set up an empty plot of the correct size
plot(NA,xlim=c(0,1),ylim=c(0,max.y),ylab="",xlab="Percentile",font = 2, main=paste0("Node ID = ",tail(comps[[1]], 1),"(", "n = ",length(node.index),")"),bty="n",yaxt="n", cex.axis = 1.5,cex.main = 2.25)
## Plot the background histogram
barplot(scale.factor*H$density,width=wdth,col=rgb(0,0,0,0.15),border=rgb(0,0,0,0.1),add=TRUE,space=0,yaxt="n")
## Add the category labels
text(seq(wdth/2,1-wdth/2,by=wdth),rep(0,length(levels(Y))),levels(Y),pos=3,adj=0.5,cex=1.5, col=gray(0.1))
#text(seq(wdth/2,1-wdth/2,by=wdth),rep(quantile(scale.factor*H$density, 0.97),length(levels(Y))),levels(Y),pos=3,adj=0.5,cex=1.5,col=gray(0.5))
}
else{
H <- hist(ecdf(Y)(Y[node.index]),breaks=seq(0,1,by=0.1),plot=FALSE)
## Scale the histogram so it fits vertically on the plot.
scale.factor <- max.y/max(H$density)
## Set up an empty plot of the correct size
plot(NA,xlim=c(0,1),ylim=c(0,max.y),ylab="", xlab="Percentile",font = 2,main=paste0("Node ID = ", tail(comps[[1]], 1), " (Mean = ",round(my.y.val, 2),", n = ",length(node.index),")"),bty="n", yaxt = "n", cex.axis = 1.5, cex.main =2.25)
## Plot the background histogram
bp<-barplot(scale.factor*H$density,width=0.1,col=rgb(0,0,0,0.15),border=rgb(0,0,0,0.1),add=TRUE,space=0, yaxt = "n")
counts.ecdf<-ceiling(10*ecdf(Y)(Y[node.index]))
mean.Ynode<-data.frame(counts.ecdf, Y[node.index])
mean.Y<-aggregate(Y[node.index], list(counts.ecdf),  mean)$x
if(all((mean.Y)<=10)){mean.Y<-round(mean.Y, 1)}else{
mean.Y<-round(mean.Y, 0)
}
titles.Y<-rep(" ", length(H$density))
titles.Y[!H$density == 0]<-mean.Y
text(bp, 0, titles.Y, pos=3,adj=0.5,cex=1.5)
## Draw in a line for the mean
mu.Y <- mean(Y[node.index])
segments(ecdf(Y)(mu.Y),0,ecdf(Y)(mu.Y),max.y,col=rgb(0,0,0,0.5),lwd=2)
}
## Now plot the horizontal bars corresponding to each variable.
j <- 1
for(i in which(act.vars)) {
F.x <- ecdf(X[,var.nms[i]])
lo <- ifelse(mymat[i,1]==-Inf,0,F.x(mymat[i,1]))
hi <- ifelse(mymat[i,2]==Inf,1,F.x(mymat[i,2]))
polygon(c(lo,lo,hi,hi),c(j-0.5,j+0.5,j+0.5,j-0.5),col=makeTransparent(rbw[i],0.5),border=NA)
if(rownames(My$M)[i] == "sex"){
if(mymat[i] != "-Inf"){
text(mean(c(lo,hi)),j,paste0(rownames(My$M)[i],"-", c("male", "female")[mymat[i]]), font = 2, cex = 1.6)}else{
text(mean(c(lo,hi)),j,paste0(rownames(My$M)[i],"-", "female"), font = 2, cex = 1.6)
}}
if(rownames(My$M)[i] != "sex"){
if(mymat[i,2] == Inf){idx <- 1}else{idx <-2}
if(My$M[i,1] != -Inf && My$M[i,2] == Inf){
text(mean(c(lo,hi)),j,paste0(rownames(My$M)[i], ">",round(as.numeric(My$M[i,1]), 2)), font = 2, cex = 1.6)
}
if(My$M[i,1] != -Inf && My$M[i,2] != Inf){
text(mean(c(lo,hi)),j,paste0(rownames(My$M)[i], "<=",round(as.numeric(My$M[i,2]), 2), "\n",rownames(My$M)[i], ">",round(as.numeric(My$M[i,1]), 2)), font = 2, cex = 1.6)
}
if(My$M[i,1] == -Inf && My$M[i,2] != Inf){
text(mean(c(lo,hi)),j,paste0(rownames(My$M)[i], "<=",round(as.numeric(My$M[i,2]), 2)), font = 2, cex = 1.6)
}}## Label the variables
j <- j+1
}
}
visTree <- function(cond.tree,rng=NULL, interval, rpart.party) {
## Wrapper function to produce plots from a conditional inference tree
## 'range' parameter can restrict plotting to a particular set of nodes
splittree<-list_node(cond.tree)
structure<-strsplit(splittree, split=";")
#structure<-unlist(strsplit(list_node(cond.tree), split=";"))
terminal.id<-nodeids(cond.tree, terminal = TRUE)
if(length(structure[[1]]) == length(terminal.id)){
structure[[1]]<-sapply(1:length(structure[[1]]), function(i){
paste0(structure[[1]][i],",", terminal.id[i], " ")})
}
input.info<-data_party(cond.tree)
#  X <- input.info[,2:(length(input.info)-3)]
if(rpart.party == TRUE){
X <- input.info[,2:(length(input.info)-2)]
Y <- fitted(cond.tree)[[2]]
}else{
X <- input.info[,2:(length(input.info)-3)]
Y <- fitted(cond.tree)[[3]]
}
if(is.factor(Y)) {
n.terminals <- length(structure[[1]])
#prob.mat <- matrix(data=unlist(lapply(structure[[1]],function(S) {
# unlist(lapply(strsplit(S,","),function(split.S) {
# seg <- unlist(split.S[length(split.S)])
# as.numeric(trim(strsplit(seg,"=")[[1]][2]))
#}))
#})), nrow=n.terminals)
y.list <- sapply(1:length(structure[[1]]),function(j) {
seg<-strsplit(structure[[1]],",")
if(interval == TRUE){paste0(seg[[j]][c((length(seg[[j]])-2): (length(seg[[j]])-1))], collapse = ",")}else{
paste0(seg[[j]][length(seg[[j]])-2], collapse = ",")}
})
x.list <- sapply(1:length(structure[[1]]),function(j) {
seg<-strsplit(structure[[1]],",")
x.l<-sapply(1:length(seg), function(i){
if(interval == TRUE){
x.length<-length(seg[[i]]) - 3}else{
x.length<-length(seg[[i]])-2}
})
if(interval == TRUE){
paste0(seg[[j]][1:(length(seg[[j]])-3)], collapse = ",")}else{
paste0(seg[[j]][1:(length(seg[[j]])-2)], collapse = ",")
}
})
term.node<-sapply(1:length(structure[[1]]), function(j){
seg<-strsplit(structure[[1]], ",")
if(interval == TRUE){paste0(tail(seg[[j]],1), collapse = ",")}else{
paste0(tail(seg[[j]],1), collapse = ",")}
})
structure <- lapply(1:length(y.list),function(i) {
paste0(x.list[[i]],", ",y.list[[i]], ", ", term.node[[i]])
})
}
if(length(unlist(structure))==1) { stop("Tree has only a single node; nothing to visualize.") }
#terminal.id<-nodeids(cond.tree, terminal = TRUE)
n.terminals <- ifelse(is.null(rng),length(unlist(structure)),length(rng))
if(is.null(rng)) {
index <- 1:n.terminals } else {
index <- min(rng):min(max(rng),length(unlist(structure))) } ## Should probably do some range checking
par(mfrow=c(2,ceiling(length(index)/2)),mar=c(2,1,3,1))
sapply(unlist(structure)[index],function(S) { plot.minmax(minmax.mat(S,colnames(X), interval),X,Y, S)})
}
library(partykit)
set.seed(120)
X1 <- rnorm(100)
X2 <- rnorm(100)
Y <- cut(rnorm(100,mean=X1+X2,sd=1),4)
X<-cbind(X1, X2)
varnms<-colnames(X)
cond.tree2 <- partykit::ctree(Y~X1+X2, control = ctree_control(mincriterion = 0.95))
plot(cond.tree2)
visTree(cond.tree2, interval = TRUE, rpart.party = FALSE)
blsdata<-read.csv("C:\\Users\\user\\Documents\\finalcode - Obesity Research\\Final code\\blsdata.csv", sep = ",")
setwd("C:/Users/user/Documents")
blsdata<-read.csv("finalcode - Obesity Research\\Final code\\blsdata.csv", header = T)
names(blsdata)
library(partykit)
names(blsdata)[c(4, 6, 12, 19, 21, 22, 23, 24, 25)]<-c("skcal", "srvgssb", "edeq15", "freqff","rest.eating", "disinhibition", "hunger", "liking", "wanting")
newblsdata<-blsdata[,c(7,21, 22,23, 24, 25, 26)]
library(gridExtra)
potentialtree<-ctree(kcal24h0~., data = newblsdata, control = ctree_control(mincriterion = 0.95))
tab <- tapply(potentialtree$fitted[["(response)"]],
factor(potentialtree$fitted[["(fitted)"]], levels = 1:length(potentialtree)),
FUN = mean)
number<-table(potentialtree$fitted[["(fitted)"]])
tab <- format(round(tab, 0))
mlab = function(id, nobs){
p1<-paste("Mean = ", tab[id])
p2<-c(paste0("Node = ", id,", ",paste0("(","n = ", number[[id]],")")))
tt1<-ttheme_default(base_size = 14)
p<-tableGrob(p2, rows = c(" "), theme = tt1)
grid.text(x = 0.51,y = -7.45, label = p1, gp = gpar(fontsize = 18))
grid.draw(p)
}
plot(potentialtree, gp = gpar(fontsize = 19, fontface = "bold"), type = "extended",tp_args = list(mainlab = mlab), ep_args = list(digits = 1))
blsdata$bin<-0
blsdataedit$bin<-cut(blsdata$kcal24h0, 3, dig.lab = 4)
blsdataedit<-blsdata
blsdataedit$bin<-cut(blsdata$kcal24h0, 3, dig.lab = 4)
potentialtree<-ctree(bin~hunger+rrvfood+rest.eating+liking+wanting+disinhibition, data = blsdataedit, control = ctree_control(mincriterion = 0.95))
plot(potentialtree, gp = gpar(fontsize = 19, fontface = "bold"), type = "extended", ep_args = list(digits = 1))
blsdata$bin
blsdataedit$bin
blsdataedit$bin<-cut(blsdata$kcal24h0, 4, dig.lab = 4)
blsdataedit$bin
potentialtree<-ctree(bin~hunger+rrvfood+rest.eating+liking+wanting+disinhibition, data = blsdataedit, control = ctree_control(mincriterion = 0.95))
plot(potentialtree, gp = gpar(fontsize = 19, fontface = "bold"), type = "extended", ep_args = list(digits = 1))
visTree(potentialtree, interval = FALSE, rpart.party = FALSE)
visTree(potentialtree, interval = TRUE, rpart.party = FALSE)
getwd()
setwd()
visTree(potentialtree, interval = TRUE, rpart.party = FALSE)
getwd()
pdf("ctreecat.pdf", width = 20, height = 10)
plot(potentialtree, gp = gpar(fontsize = 19, fontface = "bold"), type = "extended", ep_args = list(digits = 1))
dev.off()
pdf("viscat.pdf", width = 20, height = 10)
visTree(potentialtree, interval = TRUE, rpart.party = FALSE)
dev.off()
plot(potentialtree, gp = gpar(fontsize = 19, fontface = "bold"), type = "extended", ep_args = list(digits = 1))
pdf("ctreecat.pdf", width = 9, height = 7)
plot(potentialtree, gp = gpar(fontsize = 19, fontface = "bold"), type = "extended", ep_args = list(digits = 1))
dev.off()
pdf("ctreecat.pdf", width = 30, height = 12)
plot(potentialtree, gp = gpar(fontsize = 19, fontface = "bold"), type = "extended", ep_args = list(digits = 1))
dev.off()
pdf("ctreecat.pdf", width = 25, height = 12)
plot(potentialtree, gp = gpar(fontsize = 19, fontface = "bold"), type = "extended", ep_args = list(digits = 1))
dev.off()
pdf("ctreecat.pdf", width = 22, height = 12)
plot(potentialtree, gp = gpar(fontsize = 19, fontface = "bold"), type = "extended", ep_args = list(digits = 1))
dev.off()
pdf("ctreecat.pdf", width = 24, height = 12)
plot(potentialtree, gp = gpar(fontsize = 19, fontface = "bold"), type = "extended", ep_args = list(digits = 1))
dev.off()
pdf("ctreecat.pdf", width = 25, height = 12)
plot(potentialtree, gp = gpar(fontsize = 19, fontface = "bold"), type = "extended", ep_args = list(digits = 1))
dev.off()
install.packages("rmarkdown", type = "source")
setwd("C:\\Users\\user\\Documents\\GitHub\\AshwiniKV.github.io")
rmarkdown::render_site()
rmarkdown::render_site()
setwd("C:\\Users\\user\\Documents\\GitHub\\AshwiniKV.github.io")
rmarkdown::render_site()
setwd("C:\\Users\\user\\Documents\\GitHub\\AshwiniKV.github.io")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
setwd("C:\\Users\\user\\Documents\\GitHub\\AshwiniKV.github.io")
rmarkdown::render_site()
setwd("C:\\Users\\user\\Documents\\GitHub\\AshwiniKV.github.io")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
setwd("C:\\Users\\user\\Documents\\GitHub\\AshwiniKV.github.io")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
install.packages("prettydoc")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
setwd("C:\\Users\\user\\Documents\\GitHub\\AshwiniKV.github.io")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
rmarkdown::render_site()
setwd("C:\\Users\\user\\Documents\\GitHub\\AshwiniKV.github.io")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
setwd("C:\\Users\\user\\Documents\\GitHub\\AshwiniKV.github.io")
rmarkdown::render_site()
setwd("C:\\Users\\user\\Documents\\GitHub\\AshwiniKV.github.io")
rmarkdown::render_site()
rmarkdown::render_site()
